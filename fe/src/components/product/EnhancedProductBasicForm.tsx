import React, { useState, useEffect } from 'react';
import {
  Form,
  Input,
  Select,
  Row,
  Col,
  Button,
  Alert,
  Switch,
  Space,
  Typography,
  Divider,
} from 'antd';
import {
  BulbOutlined,
  SyncOutlined,
  SettingOutlined,
  InfoCircleOutlined,
} from '@ant-design/icons';
import { ProductFormData } from '@/types';
import EnhancedRichTextEditor from '@/components/common/EnhancedRichTextEditor';
import SimpleRichTextEditor from '@/components/common/SimpleRichTextEditor';
import EditorErrorBoundary from '@/components/common/EditorErrorBoundary';
import Base64ImageWarning from './Base64ImageWarning';
import DynamicProductName from './DynamicProductName';
import { sampleLaptopData } from '@/utils/sampleDataHelper';

const { TextArea } = Input;
const { Option } = Select;
const { Text, Title } = Typography;

interface EnhancedProductBasicFormProps {
  fillExampleData: () => void;
  productId?: string;
  selectedAttributes?: Record<string, string>;
  onNameGenerated?: (name: string, details: any) => void;
}

const EnhancedProductBasicForm: React.FC<EnhancedProductBasicFormProps> = ({
  fillExampleData,
  productId,
  selectedAttributes = {},
  onNameGenerated,
}) => {
  const form = Form.useFormInstance();
  const [dynamicNamingEnabled, setDynamicNamingEnabled] = useState(true);
  const [showAdvanced, setShowAdvanced] = useState(false);

  // Watch form values for dynamic naming
  const productName = Form.useWatch('name', form);
  const baseName = Form.useWatch('baseName', form);
  const isVariantProduct = Form.useWatch('isVariantProduct', form);
  const description = Form.useWatch('description', form) || '';

  const handleDescriptionChange = (value: string) => {
    form.setFieldValue('description', value);
  };

  const handleFillSampleData = () => {
    const sampleData = {
      ...sampleLaptopData,
      baseName: 'ThinkPad X1 Carbon',
      isVariantProduct: true,
    };
    form.setFieldsValue(sampleData);
    fillExampleData();
  };

  // Auto-set baseName when product name changes (if not set manually)
  useEffect(() => {
    if (productName && !baseName && isVariantProduct) {
      form.setFieldValue('baseName', productName);
    }
  }, [productName, baseName, isVariantProduct, form]);

  const effectiveBaseName = baseName || productName;

  return (
    <div>
      <Row gutter={[24, 16]}>
        {/* Dynamic Naming Controls */}
        <Col span={24}>
          <div
            style={{
              padding: '16px',
              background: '#fafafa',
              borderRadius: 8,
              marginBottom: 16,
              border: '1px dashed #d9d9d9',
            }}
          >
            <Space
              size="middle"
              style={{ width: '100%', justifyContent: 'space-between' }}
            >
              <Space>
                <BulbOutlined style={{ color: '#1890ff' }} />
                <Text strong>T·∫°o t√™n s·∫£n ph·∫©m t·ª± ƒë·ªông</Text>
                <Switch
                  checked={dynamicNamingEnabled}
                  onChange={setDynamicNamingEnabled}
                  size="small"
                />
              </Space>
              <Button
                type="link"
                size="small"
                icon={<SettingOutlined />}
                onClick={() => setShowAdvanced(!showAdvanced)}
              >
                {showAdvanced ? '·∫®n' : 'N√¢ng cao'}
              </Button>
            </Space>

            {dynamicNamingEnabled && (
              <Text
                type="secondary"
                style={{ fontSize: 12, display: 'block', marginTop: 8 }}
              >
                T√™n s·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông d·ª±a tr√™n t√™n c∆° b·∫£n v√† thu·ªôc
                t√≠nh ƒë√£ ch·ªçn
              </Text>
            )}
          </div>
        </Col>

        {/* Product Name Field */}
        <Col span={24}>
          <Form.Item
            name="name"
            label="T√™n s·∫£n ph·∫©m"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!' }]}
            extra={
              dynamicNamingEnabled
                ? 'T√™n n√†y s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông khi b·∫°n ch·ªçn thu·ªôc t√≠nh'
                : undefined
            }
          >
            <Input
              placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m"
              size="large"
              disabled={
                dynamicNamingEnabled &&
                Object.values(selectedAttributes).some((v) => v)
              }
            />
          </Form.Item>
        </Col>

        {/* Base Name Field (Advanced) */}
        {showAdvanced && (
          <Col span={24}>
            <Form.Item
              name="baseName"
              label={
                <Space>
                  <span>T√™n c∆° b·∫£n</span>
                  <InfoCircleOutlined title="T√™n c∆° b·∫£n s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫°o t√™n cho c√°c variant" />
                </Space>
              }
              extra="V√≠ d·ª•: 'ThinkPad X1 Carbon' s·∫Ω t·∫°o ra 'ThinkPad X1 Carbon i7 16GB'"
            >
              <Input placeholder="Nh·∫≠p t√™n c∆° b·∫£n cho s·∫£n ph·∫©m" size="large" />
            </Form.Item>
          </Col>
        )}

        {/* Variant Product Toggle (Advanced) */}
        {showAdvanced && (
          <Col span={24}>
            <Form.Item
              name="isVariantProduct"
              label="S·∫£n ph·∫©m c√≥ variants"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
          </Col>
        )}

        {/* Dynamic Product Name Component */}
        {dynamicNamingEnabled && (
          <Col span={24}>
            <DynamicProductName
              baseName={effectiveBaseName}
              selectedAttributes={selectedAttributes}
              productId={productId}
              onNameGenerated={onNameGenerated}
              disabled={!dynamicNamingEnabled}
            />
          </Col>
        )}

        {/* Status Field */}
        <Col span={24}>
          <Form.Item name="status" label="Tr·∫°ng th√°i" initialValue="active">
            <Select placeholder="Ch·ªçn tr·∫°ng th√°i" size="large">
              <Option value="active">‚úÖ Ho·∫°t ƒë·ªông</Option>
              <Option value="inactive">‚è∏Ô∏è Kh√¥ng ho·∫°t ƒë·ªông</Option>
              <Option value="draft">üìù B·∫£n nh√°p</Option>
            </Select>
          </Form.Item>
        </Col>

        {/* Short Description */}
        <Col span={24}>
          <Form.Item
            name="shortDescription"
            label="M√¥ t·∫£ ng·∫Øn"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ ng·∫Øn!' }]}
          >
            <TextArea
              rows={3}
              placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn v·ªÅ s·∫£n ph·∫©m (hi·ªÉn th·ªã trong danh s√°ch s·∫£n ph·∫©m)"
              maxLength={200}
              showCount
              size="large"
            />
          </Form.Item>
        </Col>

        {/* Featured Toggle */}
        <Col span={24}>
          <Form.Item
            name="featured"
            label="S·∫£n ph·∫©m n·ªïi b·∫≠t"
            valuePropName="checked"
          >
            <Switch />
          </Form.Item>
        </Col>

        {/* Sample Data Button */}
        <Col span={24}>
          <Button
            type="dashed"
            onClick={handleFillSampleData}
            icon={<SyncOutlined />}
            block
          >
            ƒêi·ªÅn d·ªØ li·ªáu m·∫´u (ThinkPad X1 Carbon)
          </Button>
        </Col>

        <Col span={24}>
          <Divider />
        </Col>

        {/* Description Field */}
        <Col span={24}>
          <Form.Item
            name="description"
            label="M√¥ t·∫£ chi ti·∫øt"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt!' },
            ]}
          >
            <EditorErrorBoundary>
              <EnhancedRichTextEditor
                value={description}
                onChange={handleDescriptionChange}
                placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m..."
              />
            </EditorErrorBoundary>
          </Form.Item>
          <Base64ImageWarning description={description} />
        </Col>
      </Row>
    </div>
  );
};

export default EnhancedProductBasicForm;
