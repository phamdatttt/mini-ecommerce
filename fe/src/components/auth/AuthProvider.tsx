import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '@/store';
import { useGetCurrentUserQuery } from '@/services/authApi';
import { loginSuccess, logout } from '@/features/auth/authSlice';
import LoadingSpinner from '@/components/common/LoadingSpinner';

interface AuthProviderProps {
  children: React.ReactNode;
}

/**
 * AuthProvider Component
 *
 * Nhi·ªám v·ª•:
 * 1. Ki·ªÉm tra token trong localStorage khi app kh·ªüi ƒë·ªông
 * 2. N·∫øu c√≥ token, g·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin user hi·ªán t·∫°i
 * 3. C·∫≠p nh·∫≠t Redux state v·ªõi th√¥ng tin user
 * 4. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p token kh√¥ng h·ª£p l·ªá
 */
const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const dispatch = useDispatch();
  const { token, isAuthenticated, user } = useSelector(
    (state: RootState) => state.auth
  );

  // Ch·ªâ g·ªçi API khi c√≥ token nh∆∞ng ch∆∞a c√≥ user info
  const shouldFetchUser = token && !user && isAuthenticated;

  const {
    data: currentUser,
    error,
    isLoading,
    isSuccess,
    isError,
  } = useGetCurrentUserQuery(undefined, {
    // Ch·ªâ g·ªçi API khi c·∫ßn thi·∫øt
    skip: !shouldFetchUser,
    // Refetch khi component mount l·∫°i
    refetchOnMountOrArgChange: true,
  });

  useEffect(() => {
    // N·∫øu API tr·∫£ v·ªÅ user successfully, c·∫≠p nh·∫≠t Redux state
    if (isSuccess && currentUser && token) {
      console.log('‚úÖ User info fetched successfully:', currentUser);
      console.log('üë§ User role:', currentUser.role);
      console.log('üîê Token:', token);

      dispatch(
        loginSuccess({
          user: currentUser,
          token: token,
          refreshToken: localStorage.getItem('refreshToken') || '',
        })
      );

      console.log('üì¶ Dispatched loginSuccess with user data');
    }
  }, [isSuccess, currentUser, token, dispatch]);

  useEffect(() => {
    // N·∫øu API tr·∫£ v·ªÅ l·ªói (token kh√¥ng h·ª£p l·ªá), logout user
    if (isError && error) {
      console.log('‚ùå Failed to fetch user info:', error);
      console.log('üîê Logging out due to invalid token...');

      // Clear authentication state
      dispatch(logout());
    }
  }, [isError, error, dispatch]);

  // Hi·ªÉn th·ªã loading khi ƒëang fetch user info
  if (shouldFetchUser && isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-neutral-50 dark:bg-neutral-900">
        <div className="text-center">
          <LoadingSpinner size="large" />
          <p className="mt-4 text-neutral-600 dark:text-neutral-400">
            ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...
          </p>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};

export default AuthProvider;
