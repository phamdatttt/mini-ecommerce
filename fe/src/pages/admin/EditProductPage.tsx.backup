import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Form,
  Input,
  Select,
  Button,
  Card,
  Tabs,
  Row,
  Col,
  InputNumber,
  Switch,
  Tag,
  Space,
  Divider,
  Typography,
  Spin,
  Result,
  message,
  Image,
  Table,
  Modal,
} from 'antd';
import {
  SaveOutlined,
  ArrowLeftOutlined,
  PlusOutlined,
  DeleteOutlined,
  EditOutlined,
} from '@ant-design/icons';
import { useGetProductByIdQuery } from '@/services/productApi';
import { useUpdateProductMutation } from '@/services/adminProductApi';
import { useGetAllCategoriesQuery } from '@/services/categoryApi';

const { TextArea } = Input;
const { Title, Text } = Typography;
const { Option } = Select;

interface ProductAttribute {
  id?: string;
  name: string;
  value: string;
}

interface ProductVariant {
  id?: string;
  name: string;
  value: string;
  price: number;
  stock: number;
  sku: string;
}

const EditProductPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [activeTab, setActiveTab] = useState('basic');
  const [attributes, setAttributes] = useState<ProductAttribute[]>([]);
  const [variants, setVariants] = useState<ProductVariant[]>([]);
  const [attributeModalVisible, setAttributeModalVisible] = useState(false);
  const [variantModalVisible, setVariantModalVisible] = useState(false);
  const [editingAttribute, setEditingAttribute] =
    useState<ProductAttribute | null>(null);
  const [editingVariant, setEditingVariant] = useState<ProductVariant | null>(
    null
  );

  // API queries
  const {
    data: productResponse,
    isLoading: isLoadingProduct,
    error: productError,
  } = useGetProductByIdQuery(id || '');

  const { data: categoriesResponse, isLoading: isCategoriesLoading } =
    useGetAllCategoriesQuery();

  const [updateProduct, { isLoading: isUpdating }] = useUpdateProductMutation();

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    shortDescription: '',
    price: '',
    comparePrice: '',
    stock: '',
    sku: '',
    status: 'active',
    categoryIds: [] as string[],
    images: '',
    thumbnail: '',
    featured: false,
    searchKeywords: '',
    seoTitle: '',
    seoDescription: '',
    seoKeywords: '',
  });

  const [attributes, setAttributes] = useState<Attribute[]>([]);
  const [variants, setVariants] = useState<Variant[]>([]);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [activeTab, setActiveTab] = useState<string>('basic');

  // Populate form data when product data is loaded
  useEffect(() => {
    if (productData?.data) {
      const product = productData.data;

      setFormData({
        name: product.name || '',
        description: product.description || '',
        shortDescription: product.shortDescription || '',
        price: product.price?.toString() || '',
        comparePrice: product.comparePrice?.toString() || '',
        stock:
          product.stockQuantity?.toString() || product.stock?.toString() || '',
        sku: product.sku || '',
        status: product.status || 'active',
        categoryIds: product.categories?.map((cat: any) => cat.id) || [],
        images: product.images?.join(',') || '',
        thumbnail: product.thumbnail || '',
        featured: product.featured || false,
        searchKeywords: product.searchKeywords?.join(',') || '',
        seoTitle: product.seoTitle || '',
        seoDescription: product.seoDescription || '',
        seoKeywords: product.seoKeywords?.join(',') || '',
      });

      // Set attributes if available
      if (product.attributes && product.attributes.length > 0) {
        setAttributes(
          product.attributes.map((attr: any, index: number) => ({
            id: index.toString(),
            name: attr.name,
            value: attr.value,
          }))
        );
      }

      // Set variants if available
      if (product.variants && product.variants.length > 0) {
        setVariants(
          product.variants.map((variant: any) => ({
            id: variant.id || Date.now().toString(),
            name: variant.name,
            price: variant.price,
            stock: variant.stock,
          }))
        );
      }
    }
  }, [productData]);

  // Auto-fill SEO fields when name and description change
  useEffect(() => {
    if (formData.name && !formData.seoTitle) {
      setFormData((prev) => ({ ...prev, seoTitle: prev.name }));
    }
    if (formData.description && !formData.seoDescription) {
      setFormData((prev) => ({
        ...prev,
        seoDescription: prev.description.substring(0, 160),
      }));
    }
    if (formData.description && !formData.shortDescription) {
      setFormData((prev) => ({
        ...prev,
        shortDescription: prev.description.substring(0, 200),
      }));
    }
  }, [formData.name, formData.description]);

  // Validate form fields
  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Tên sản phẩm là bắt buộc';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Mô tả sản phẩm là bắt buộc';
    }

    if (!formData.shortDescription.trim()) {
      newErrors.shortDescription = 'Mô tả ngắn là bắt buộc';
    }

    if (!formData.price || Number(formData.price) <= 0) {
      newErrors.price = 'Giá sản phẩm phải lớn hơn 0';
    }

    if (!formData.stock || Number(formData.stock) < 0) {
      newErrors.stock = 'Số lượng tồn kho không được âm';
    }

    if (!formData.sku.trim()) {
      newErrors.sku = 'SKU là bắt buộc';
    }

    if (formData.categoryIds.length === 0) {
      newErrors.categoryIds = 'Phải chọn ít nhất một danh mục';
    }

    setErrors(newErrors);

    // If there are errors, switch to the tab containing the first error
    if (Object.keys(newErrors).length > 0) {
      if (
        newErrors.name ||
        newErrors.sku ||
        newErrors.description ||
        newErrors.shortDescription
      ) {
        setActiveTab('basic');
      } else if (newErrors.price || newErrors.stock) {
        setActiveTab('pricing');
      } else if (newErrors.categoryIds) {
        setActiveTab('categories');
      }
    }

    return Object.keys(newErrors).length === 0;
  };

  // Handle input changes
  const handleInputChange = (
    field: string,
    value: string | string[] | boolean
  ) => {
    setFormData({ ...formData, [field]: value });
    if (errors[field]) {
      setErrors({ ...errors, [field]: '' });
    }
  };

  // Attribute management
  const addAttribute = () => {
    setAttributes([
      ...attributes,
      { id: Date.now().toString(), name: '', value: '' },
    ]);
  };

  const updateAttribute = (id: string, field: string, value: string) => {
    setAttributes(
      attributes.map((attr) =>
        attr.id === id ? { ...attr, [field]: value } : attr
      )
    );
  };

  const removeAttribute = (id: string) => {
    setAttributes(attributes.filter((attr) => attr.id !== id));
  };

  // Variant management
  const addVariant = () => {
    setVariants([
      ...variants,
      { id: Date.now().toString(), name: '', price: 0, stock: 0 },
    ]);
  };

  const updateVariant = (id: string, field: string, value: string | number) => {
    setVariants(
      variants.map((variant) =>
        variant.id === id ? { ...variant, [field]: value } : variant
      )
    );
  };

  const removeVariant = (id: string) => {
    setVariants(variants.filter((variant) => variant.id !== id));
  };

  // Form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      const productData = {
        id: id || '',
        name: formData.name.trim(),
        description: formData.description.trim(),
        shortDescription: formData.shortDescription.trim(),
        price: Number(formData.price),
        compareAtPrice: formData.comparePrice
          ? Number(formData.comparePrice)
          : undefined,
        stockQuantity: Number(formData.stock),
        sku: formData.sku.trim(),
        status: formData.status as 'active' | 'inactive' | 'draft',
        categoryIds: formData.categoryIds,
        images: formData.images
          ? formData.images.split(',').map((img) => img.trim())
          : [],
        thumbnail:
          formData.thumbnail ||
          (formData.images ? formData.images.split(',')[0]?.trim() : ''),
        featured: formData.featured,
        searchKeywords: formData.searchKeywords
          ? formData.searchKeywords.split(',').map((kw) => kw.trim())
          : [],
        seoTitle: formData.seoTitle || formData.name.trim(),
        seoDescription:
          formData.seoDescription || formData.shortDescription.trim(),
        seoKeywords: formData.seoKeywords
          ? formData.seoKeywords.split(',').map((kw) => kw.trim())
          : [],
        attributes: attributes
          .filter((attr) => attr.name.trim() && attr.value.trim())
          .map((attr) => ({
            name: attr.name.trim(),
            value: attr.value.trim(),
          })),
        variants: variants
          .filter((variant) => variant.name.trim())
          .map((variant) => ({
            name: variant.name.trim(),
            price: variant.price,
            stock: variant.stock,
          })),
      };

      await updateProduct(productData).unwrap();
      message.success('Cập nhật sản phẩm thành công');
      navigate('/admin/products');
    } catch (error: any) {
      console.error('Failed to update product:', error);
      message.error('Cập nhật sản phẩm thất bại');
      if (error?.data?.errors) {
        const apiErrors: Record<string, string> = {};
        error.data.errors.forEach((err: any) => {
          apiErrors[err.field] = err.message;
        });
        setErrors(apiErrors);
      }
    }
  };

  // Tab navigation with icons
  const tabs = [
    {
      id: 'basic',
      label: 'Thông tin cơ bản',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
      ),
      description: 'Tên sản phẩm, mô tả, SKU',
    },
    {
      id: 'pricing',
      label: 'Giá & Kho hàng',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
          />
        </svg>
      ),
      description: 'Giá bán, giá so sánh, tồn kho',
    },
    {
      id: 'categories',
      label: 'Phân loại',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
          />
        </svg>
      ),
      description: 'Danh mục, trạng thái',
    },
    {
      id: 'images',
      label: 'Hình ảnh',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
          />
        </svg>
      ),
      description: 'URLs hình ảnh sản phẩm',
    },
    {
      id: 'seo',
      label: 'SEO',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      ),
      description: 'Tối ưu tìm kiếm',
    },
    {
      id: 'attributes',
      label: 'Thuộc tính',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          />
        </svg>
      ),
      description: 'Màu sắc, chất liệu, kích thước',
    },
    {
      id: 'variants',
      label: 'Biến thể',
      icon: (
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
          />
        </svg>
      ),
      description: 'Size, màu sắc khác nhau',
    },
  ];

  const getCurrentTabIndex = () =>
    tabs.findIndex((tab) => tab.id === activeTab);
  const currentTab = tabs[getCurrentTabIndex()];

  // Hiển thị loading khi đang tải dữ liệu
  if (isLoadingProduct) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spin size="large" tip="Đang tải thông tin sản phẩm..." />
      </div>
    );
  }

  // Hiển thị lỗi nếu có
  if (productError) {
    return (
      <Result
        status="404"
        title="Không tìm thấy sản phẩm"
        subTitle="Sản phẩm bạn đang tìm kiếm không tồn tại hoặc đã bị xóa."
        extra={
          <Button type="primary" onClick={() => navigate('/admin/products')}>
            Quay lại danh sách sản phẩm
          </Button>
        }
      />
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <div className="container mx-auto px-4 py-6">
        {/* Enhanced Header */}
        <div className="relative overflow-hidden mb-8">
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-600 via-blue-600 to-purple-600 opacity-90"></div>
          <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent"></div>
          <div className="relative bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 dark:border-slate-700/30 p-8">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="space-y-3">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-emerald-500 via-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                    <svg
                      className="w-8 h-8 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 dark:from-slate-200 dark:to-slate-400 bg-clip-text text-transparent">
                      Chỉnh sửa sản phẩm
                    </h1>
                    <p className="text-slate-600 dark:text-slate-400 font-medium text-lg">
                      {productData?.data?.name || 'Đang tải...'}
                    </p>
                  </div>
                </div>
                <div className="flex flex-wrap gap-2">
                  {productData?.data?.categories?.map((cat: any) => (
                    <Tag color="blue" key={cat.id}>
                      {cat.name}
                    </Tag>
                  ))}
                  <Tag
                    color={
                      productData?.data?.status === 'active'
                        ? 'green'
                        : productData?.data?.status === 'inactive'
                          ? 'orange'
                          : 'default'
                    }
                  >
                    {statusOptions.find(
                      (s) => s.value === productData?.data?.status
                    )?.label || productData?.data?.status}
                  </Tag>
                </div>
              </div>
              <div className="flex gap-3">
                <Button
                  type="default"
                  onClick={() => navigate('/admin/products')}
                  size="large"
                >
                  Hủy
                </Button>
                <Button
                  type="primary"
                  onClick={handleSubmit}
                  loading={isUpdating}
                  size="large"
                >
                  Lưu thay đổi
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Form with tabs */}
        <div className="bg-white dark:bg-slate-800 rounded-xl shadow-lg border border-slate-200 dark:border-slate-700 overflow-hidden">
          <Tabs
            activeKey={activeTab}
            onChange={setActiveTab}
            tabPosition="left"
            className="min-h-[600px]"
          >
            {/* Tab Thông tin cơ bản */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[0].icon}
                  <span>{tabs[0].label}</span>
                </div>
              }
              key="basic"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Thông tin cơ bản</h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Tên sản phẩm <span className="text-red-500">*</span>
                    </label>
                    <Input
                      value={formData.name}
                      onChange={(e) =>
                        handleInputChange('name', e.target.value)
                      }
                      placeholder="Nhập tên sản phẩm"
                      error={errors.name}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      SKU <span className="text-red-500">*</span>
                    </label>
                    <Input
                      value={formData.sku}
                      onChange={(e) => handleInputChange('sku', e.target.value)}
                      placeholder="Mã sản phẩm duy nhất"
                      error={errors.sku}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Mô tả ngắn <span className="text-red-500">*</span>
                    </label>
                    <Input
                      as="textarea"
                      rows={3}
                      value={formData.shortDescription}
                      onChange={(e) =>
                        handleInputChange('shortDescription', e.target.value)
                      }
                      placeholder="Mô tả ngắn gọn về sản phẩm"
                      error={errors.shortDescription}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Mô tả chi tiết <span className="text-red-500">*</span>
                    </label>
                    <Input
                      as="textarea"
                      rows={6}
                      value={formData.description}
                      onChange={(e) =>
                        handleInputChange('description', e.target.value)
                      }
                      placeholder="Mô tả chi tiết về sản phẩm"
                      error={errors.description}
                    />
                  </div>
                </div>
              </div>
            </TabPane>

            {/* Tab Giá & Kho hàng */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[1].icon}
                  <span>{tabs[1].label}</span>
                </div>
              }
              key="pricing"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Giá & Kho hàng</h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Giá bán <span className="text-red-500">*</span>
                    </label>
                    <Input
                      type="number"
                      value={formData.price}
                      onChange={(e) =>
                        handleInputChange('price', e.target.value)
                      }
                      placeholder="Giá bán sản phẩm"
                      error={errors.price}
                      min={0}
                      step={1000}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Giá so sánh
                    </label>
                    <Input
                      type="number"
                      value={formData.comparePrice}
                      onChange={(e) =>
                        handleInputChange('comparePrice', e.target.value)
                      }
                      placeholder="Giá gốc/giá thị trường (nếu có)"
                      min={0}
                      step={1000}
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Hiển thị giá gốc bị gạch ngang để thể hiện giảm giá
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Số lượng tồn kho <span className="text-red-500">*</span>
                    </label>
                    <Input
                      type="number"
                      value={formData.stock}
                      onChange={(e) =>
                        handleInputChange('stock', e.target.value)
                      }
                      placeholder="Số lượng sản phẩm trong kho"
                      error={errors.stock}
                      min={0}
                    />
                  </div>

                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="featured"
                      checked={formData.featured}
                      onChange={(e) =>
                        handleInputChange('featured', e.target.checked)
                      }
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <label
                      htmlFor="featured"
                      className="ml-2 block text-sm text-gray-700 dark:text-gray-300"
                    >
                      Sản phẩm nổi bật
                    </label>
                  </div>
                </div>
              </div>
            </TabPane>

            {/* Tab Phân loại */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[2].icon}
                  <span>{tabs[2].label}</span>
                </div>
              }
              key="categories"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Phân loại</h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Danh mục <span className="text-red-500">*</span>
                    </label>
                    <Select
                      isMulti
                      options={
                        categoriesResponse?.data?.map((cat: any) => ({
                          value: cat.id,
                          label: cat.name,
                        })) || []
                      }
                      value={formData.categoryIds}
                      onChange={(selected) =>
                        handleInputChange(
                          'categoryIds',
                          selected.map((option) => option.value)
                        )
                      }
                      placeholder="Chọn danh mục"
                      error={errors.categoryIds}
                      isLoading={isCategoriesLoading}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Trạng thái
                    </label>
                    <Select
                      options={statusOptions}
                      value={formData.status}
                      onChange={(selected) =>
                        handleInputChange('status', selected.value)
                      }
                      placeholder="Chọn trạng thái"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Từ khóa tìm kiếm
                    </label>
                    <Input
                      value={formData.searchKeywords}
                      onChange={(e) =>
                        handleInputChange('searchKeywords', e.target.value)
                      }
                      placeholder="Nhập từ khóa, phân cách bằng dấu phẩy"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Giúp khách hàng tìm thấy sản phẩm dễ dàng hơn
                    </p>
                  </div>
                </div>
              </div>
            </TabPane>

            {/* Tab Hình ảnh */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[3].icon}
                  <span>{tabs[3].label}</span>
                </div>
              }
              key="images"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Hình ảnh</h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      URLs hình ảnh
                    </label>
                    <Input
                      as="textarea"
                      rows={4}
                      value={formData.images}
                      onChange={(e) =>
                        handleInputChange('images', e.target.value)
                      }
                      placeholder="Nhập URLs hình ảnh, phân cách bằng dấu phẩy"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Hình ảnh đầu tiên sẽ được sử dụng làm ảnh đại diện
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      URL ảnh đại diện (thumbnail)
                    </label>
                    <Input
                      value={formData.thumbnail}
                      onChange={(e) =>
                        handleInputChange('thumbnail', e.target.value)
                      }
                      placeholder="URL ảnh đại diện (nếu khác với ảnh đầu tiên)"
                    />
                  </div>

                  {formData.images && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Xem trước
                      </label>
                      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                        {formData.images
                          .split(',')
                          .filter(Boolean)
                          .map((url, index) => (
                            <div
                              key={index}
                              className="relative aspect-square rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700"
                            >
                              <img
                                src={url.trim()}
                                alt={`Product ${index + 1}`}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                  (e.target as HTMLImageElement).src =
                                    '/placeholder-image.jpg';
                                }}
                              />
                              {index === 0 && (
                                <div className="absolute top-2 left-2 bg-blue-500 text-white text-xs px-2 py-1 rounded">
                                  Chính
                                </div>
                              )}
                            </div>
                          ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </TabPane>

            {/* Tab SEO */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[4].icon}
                  <span>{tabs[4].label}</span>
                </div>
              }
              key="seo"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Tối ưu SEO</h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Tiêu đề SEO
                    </label>
                    <Input
                      value={formData.seoTitle}
                      onChange={(e) =>
                        handleInputChange('seoTitle', e.target.value)
                      }
                      placeholder="Tiêu đề hiển thị trên kết quả tìm kiếm"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Mô tả SEO
                    </label>
                    <Input
                      as="textarea"
                      rows={3}
                      value={formData.seoDescription}
                      onChange={(e) =>
                        handleInputChange('seoDescription', e.target.value)
                      }
                      placeholder="Mô tả hiển thị trên kết quả tìm kiếm"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Tối đa 160 ký tự để hiển thị tốt nhất trên Google
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Từ khóa SEO
                    </label>
                    <Input
                      value={formData.seoKeywords}
                      onChange={(e) =>
                        handleInputChange('seoKeywords', e.target.value)
                      }
                      placeholder="Nhập từ khóa SEO, phân cách bằng dấu phẩy"
                    />
                  </div>
                </div>
              </div>
            </TabPane>

            {/* Tab Thuộc tính */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[5].icon}
                  <span>{tabs[5].label}</span>
                </div>
              }
              key="attributes"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Thuộc tính sản phẩm</h2>
                <div className="space-y-6">
                  {attributes.map((attr, index) => (
                    <div
                      key={attr.id}
                      className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg"
                    >
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Tên thuộc tính
                        </label>
                        <Input
                          value={attr.name}
                          onChange={(e) =>
                            updateAttribute(attr.id, 'name', e.target.value)
                          }
                          placeholder="Ví dụ: Màu sắc, Chất liệu, Kích thước"
                        />
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Giá trị
                          </label>
                          <Input
                            value={attr.value}
                            onChange={(e) =>
                              updateAttribute(attr.id, 'value', e.target.value)
                            }
                            placeholder="Ví dụ: Đỏ, Gỗ, XL"
                          />
                        </div>
                        <button
                          type="button"
                          onClick={() => removeAttribute(attr.id)}
                          className="mt-6 p-2 text-red-500 hover:text-red-700 focus:outline-none"
                        >
                          <svg
                            className="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}

                  <button
                    type="button"
                    onClick={addAttribute}
                    className="flex items-center justify-center w-full py-2 px-4 border border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-blue-600 dark:text-blue-400 hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                  >
                    <svg
                      className="w-5 h-5 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                      />
                    </svg>
                    Thêm thuộc tính
                  </button>
                </div>
              </div>
            </TabPane>

            {/* Tab Biến thể */}
            <TabPane
              tab={
                <div className="flex items-center gap-2 py-2">
                  {tabs[6].icon}
                  <span>{tabs[6].label}</span>
                </div>
              }
              key="variants"
            >
              <div className="p-6">
                <h2 className="text-2xl font-bold mb-6">Biến thể sản phẩm</h2>
                <div className="space-y-6">
                  {variants.map((variant, index) => (
                    <div
                      key={variant.id}
                      className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg"
                    >
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Tên biến thể
                        </label>
                        <Input
                          value={variant.name}
                          onChange={(e) =>
                            updateVariant(variant.id, 'name', e.target.value)
                          }
                          placeholder="Ví dụ: Size S - Màu Đỏ"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Giá
                        </label>
                        <Input
                          type="number"
                          value={variant.price}
                          onChange={(e) =>
                            updateVariant(
                              variant.id,
                              'price',
                              Number(e.target.value)
                            )
                          }
                          placeholder="Giá biến thể"
                          min={0}
                          step={1000}
                        />
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex-1">
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Tồn kho
                          </label>
                          <Input
                            type="number"
                            value={variant.stock}
                            onChange={(e) =>
                              updateVariant(
                                variant.id,
                                'stock',
                                Number(e.target.value)
                              )
                            }
                            placeholder="Số lượng tồn kho"
                            min={0}
                          />
                        </div>
                        <button
                          type="button"
                          onClick={() => removeVariant(variant.id)}
                          className="mt-6 p-2 text-red-500 hover:text-red-700 focus:outline-none"
                        >
                          <svg
                            className="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                            />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}

                  <button
                    type="button"
                    onClick={addVariant}
                    className="flex items-center justify-center w-full py-2 px-4 border border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-blue-600 dark:text-blue-400 hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                  >
                    <svg
                      className="w-5 h-5 mr-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                      />
                    </svg>
                    Thêm biến thể
                  </button>
                </div>
              </div>
            </TabPane>
          </Tabs>
        </div>

        {/* Form actions */}
        <div className="mt-6 flex justify-end gap-4">
          <Button
            type="default"
            onClick={() => navigate('/admin/products')}
            size="large"
          >
            Hủy
          </Button>
          <Button
            type="primary"
            onClick={handleSubmit}
            loading={isUpdating}
            size="large"
          >
            Lưu thay đổi
          </Button>
        </div>
      </div>
    </div>
  );
};

export default EditProductPage;
