import React, { useEffect } from 'react';
import { Modal, Form, Input, Button, Space, Alert, Divider } from 'antd';
import {
  SaveOutlined,
  CloseOutlined,
  InfoCircleOutlined,
} from '@ant-design/icons';

const { TextArea } = Input;

interface Attribute {
  id?: string;
  name: string;
  value: string;
}

interface AttributeModalProps {
  visible: boolean;
  onClose: () => void;
  attribute?: Attribute | null;
  onSave: (attribute: Attribute) => void;
}

const AttributeModal: React.FC<AttributeModalProps> = ({
  visible,
  onClose,
  attribute,
  onSave,
}) => {
  const [form] = Form.useForm();

  useEffect(() => {
    if (attribute) {
      form.setFieldsValue({
        name: attribute.name || '',
        value: attribute.value || '',
      });
    } else {
      form.resetFields();
    }
  }, [attribute, form, visible]);

  const handleSubmit = (values: any) => {
    // ƒê·∫£m b·∫£o gi√° tr·ªã thu·ªôc t√≠nh ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch
    // N·∫øu ng∆∞·ªùi d√πng nh·∫≠p nhi·ªÅu gi√° tr·ªã c√°ch nhau b·∫±ng d·∫•u ph·∫©y, ch√∫ng ta v·∫´n gi·ªØ nguy√™n d·∫°ng chu·ªói
    // v√¨ backend s·∫Ω x·ª≠ l√Ω vi·ªác chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng
    const attributeData: Attribute = {
      id: attribute?.id,
      name: values.name.trim(),
      value: values.value.trim(),
    };

    // L∆∞u v√†o localStorage ƒë·ªÉ debug
    const savedAttributes = JSON.parse(
      localStorage.getItem('debug_attributes') || '[]'
    );
    savedAttributes.push(attributeData);
    localStorage.setItem('debug_attributes', JSON.stringify(savedAttributes));

    console.log('Saving attribute:', attributeData);
    onSave(attributeData);
    handleClose();
  };

  const handleClose = () => {
    form.resetFields();
    onClose();
  };

  return (
    <Modal
      title={attribute ? 'üè∑Ô∏è Ch·ªânh s·ª≠a thu·ªôc t√≠nh' : 'üè∑Ô∏è Th√™m thu·ªôc t√≠nh m·ªõi'}
      open={visible}
      onCancel={handleClose}
      footer={null}
      width={700}
      destroyOnClose
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        initialValues={{
          name: '',
          value: '',
        }}
      >
        <Form.Item
          label="üè∑Ô∏è T√™n thu·ªôc t√≠nh"
          name="name"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n thu·ªôc t√≠nh' }]}
          tooltip="T√™n m√¥ t·∫£ lo·∫°i thu·ªôc t√≠nh (VD: M√†u s·∫Øc, Size, Ch·∫•t li·ªáu)"
        >
          <Input placeholder="VD: M√†u s·∫Øc, Ch·∫•t li·ªáu, K√≠ch th∆∞·ªõc" />
        </Form.Item>

        <Form.Item
          label="üìù Gi√° tr·ªã thu·ªôc t√≠nh"
          name="value"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p gi√° tr·ªã thu·ªôc t√≠nh' },
          ]}
          tooltip="Nh·∫≠p c√°c gi√° tr·ªã c√≥ th·ªÉ c√≥, c√°ch nhau b·ªüi d·∫•u ph·∫©y"
        >
          <TextArea
            rows={3}
            placeholder="VD: ƒê·ªè, Xanh, ƒêen (c√°ch nhau b·ªüi d·∫•u ph·∫©y)"
          />
        </Form.Item>

        <Divider />

        {/* H∆∞·ªõng d·∫´n */}
        <Alert
          message="üí° G·ª£i √Ω t·∫°o thu·ªôc t√≠nh"
          description={
            <ul style={{ marginBottom: 0, paddingLeft: 20 }}>
              <li>
                <strong>T√™n thu·ªôc t√≠nh:</strong> N√™n r√µ r√†ng, d·ªÖ hi·ªÉu (VD: "M√†u
                s·∫Øc", "K√≠ch th∆∞·ªõc")
              </li>
              <li>
                <strong>Gi√° tr·ªã:</strong> Li·ªát k√™ t·∫•t c·∫£ c√°c t√πy ch·ªçn c√≥ th·ªÉ c√≥
              </li>
              <li>
                <strong>C√°ch nhau b·ªüi d·∫•u ph·∫©y:</strong> "ƒê·ªè, Xanh, ƒêen" ho·∫∑c
                "S, M, L, XL"
              </li>
              <li>Thu·ªôc t√≠nh n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng khi t·∫°o bi·∫øn th·ªÉ s·∫£n ph·∫©m</li>
            </ul>
          }
          type="info"
          showIcon
          icon={<InfoCircleOutlined />}
          style={{ marginBottom: 16 }}
        />

        {/* V√≠ d·ª• minh h·ªça */}
        <Alert
          message="üìñ V√≠ d·ª• minh h·ªça"
          description={
            <div style={{ marginBottom: 0 }}>
              <div>
                <strong>T√™n:</strong> "M√†u s·∫Øc" ‚Üí <strong>Gi√° tr·ªã:</strong> "ƒê·ªè,
                Xanh d∆∞∆°ng, ƒêen, Tr·∫Øng"
              </div>
              <div>
                <strong>T√™n:</strong> "K√≠ch th∆∞·ªõc" ‚Üí <strong>Gi√° tr·ªã:</strong>{' '}
                "S, M, L, XL, XXL"
              </div>
              <div>
                <strong>T√™n:</strong> "Ch·∫•t li·ªáu" ‚Üí <strong>Gi√° tr·ªã:</strong>{' '}
                "Cotton, Polyester, Linen"
              </div>
            </div>
          }
          type="success"
          showIcon
          style={{ marginBottom: 16 }}
        />

        {/* Submit buttons */}
        <div style={{ textAlign: 'right' }}>
          <Space>
            <Button onClick={handleClose} icon={<CloseOutlined />}>
              H·ªßy
            </Button>
            <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
              {attribute ? 'C·∫≠p nh·∫≠t thu·ªôc t√≠nh' : 'Th√™m thu·ªôc t√≠nh'}
            </Button>
          </Space>
        </div>
      </Form>
    </Modal>
  );
};

export default AttributeModal;
